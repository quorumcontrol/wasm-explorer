{"version":3,"sources":["theme.tsx","nodedisplay.tsx","explorer.tsx","wallet/minttokendialog.tsx","wallet/tokendisplay.tsx","wallet/establishtokendialog.tsx","wallet/wallet.tsx","layout.tsx","App.tsx","serviceWorker.ts","index.tsx","community.ts","wallet/login.tsx","wallet/sendtokendialog.tsx","wallet/receivetokendialog.tsx","../node_modules/tupelo-wasm-sdk/lib/js/go sync","state.ts"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","useStyles","makeStyles","preFormatted","whiteSpace","NodeRow","display","label","value","path","did","classes","constructor","name","href","concat","join","toString","className","JSON","stringify","TableRow","TableCell","NodeExplorer","decodedCbor","Table","TableHead","TableBody","Object","keys","map","k","i","key","explorerRoute","route","req","a","params","fetchTree","fetchTreeResult","split","undefined","tree","resolve","resolveResult","view","pathDisplay","padding","spacing","found","getCommunity","community","getTip","tip","ChainTree","store","blockservice","PathRenderer","val","slice","Explorer","result","Typography","variant","MintTokenDialog","open","onClose","tokenName","useState","amount","setAmount","loading","setLoading","handleSubmit","Error","playTransactions","mintTokenTransaction","_onClose","Dialog","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","onChange","evt","parseInt","target","CircularProgress","DialogActions","Button","onClick","color","tokenPath","balance","setBalance","max","setMax","loaded","setLoaded","mintDialogOpen","setMintDialogOpen","sendDialogOpen","setSendDialogOpen","loadInfo","tokenInfoPath","tokenInfoResp","monetaryPolicy","useEffect","TokenList","tokens","setTokens","loadTokens","tokenResp","console","log","EstablishTokenDialog","setTokenName","maxAmount","setMaxAmount","establishTokenTransaction","walletRoute","mount","userTreeObj","globalStorageStarted","userTree","redirect","WalletPage","dialogOpen","setDialogOpen","receiveDialogOpen","setReceiveDialogOpen","setDid","handleClose","then","Grid","container","item","subDirectory","window","location","pathname","Go","wasmPath","root","title","breakpoints","up","grow","flexGrow","search","marginLeft","searchIcon","routes","loginRoute","NavBar","setSearch","navigation","useNavigation","AppBar","position","Toolbar","noWrap","onSubmit","preventDefault","navigate","InputProps","startAdornment","InputAdornment","Layout","useGlobalState","Container","maxWidth","context","history","createHashHistory","direction","justify","alignItems","xs","Paper","render","renderNotFound","fallback","err","App","ThemeProvider","CssBaseline","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Community","getDefault","namespace","Buffer","from","publicUserKey","userName","EcdsaKey","passPhraseKey","Tupelo","ecdsaPubkeyToDid","publicKey","RootLoginPage","username","UsernameUnavailable","UsernameAvailable","password","setPassword","badPassword","setBadPassword","secureKey","ecdsaPubkeyToAddress","secureAddr","resolveResp","includes","dispatch","userKey","registerUser","insecureKey","secureKeyAddress","newEmptyTree","setOwnershipTransaction","setDataTransaction","setUsername","uuidv4","require","SendTokenDialog","destination","setDestination","code","setCode","uuid","sendTokenAndGetPayload","sendTokenTransaction","payload","serializeBinary","ReceiveTokenDialog","tokenPayload","TokenPayload","deserializeBinary","tx","receiveTokenTransactionFromPayload","webpackEmptyContext","e","module","exports","Promise","res","initialState","createStore","state","action","mutated","reducer","privateKey","sessionStorage","setItem","GlobalStateProvider","keyString","getItem","fromBytes","userTreeDid","setStoredState"],"mappings":"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","file":"static/js/main.496767f2.chunk.js","sourcesContent":["import red from '@material-ui/core/colors/red';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme","import React from 'react';\nimport { Link } from 'react-navi'\nimport { Table, TableHead, TableBody, TableRow, TableCell, Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    preFormatted: {\n        whiteSpace: \"pre\",\n    },\n}));\n\nconst NodeRow = ({ label, value, path, did }: { did: string, path: string[], label: string, value: any }) => {\n    const classes = useStyles()\n    let display\n    if (value && value.constructor && value.constructor.name === \"CID\") {\n        display = (\n            <Link\n                href={\"/chaintrees/\" + did + \"?path=\" + path.concat(label).join(\"/\")}\n            >\n                CID: {value.toString()}\n            </Link>\n        )\n    } else {\n        display = (\n            <code className={classes.preFormatted}>{JSON.stringify(value, null, 2)}</code>\n        )\n    }\n\n    return (\n        <TableRow>\n            <TableCell>{label}</TableCell>\n            <TableCell>{display}</TableCell>\n        </TableRow>\n    )\n}\n\nconst NodeExplorer = ({ decodedCbor, path, did }: { decodedCbor: any, path: string[], did: string }) => {\n    return (\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Key</TableCell>\n                        <TableCell>Value</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(decodedCbor).map((k: string, i: number) => {\n                        return (\n                            <NodeRow key={i} label={k} path={path} did={did} value={decodedCbor[k]} />\n                        )\n                    })}\n                </TableBody>\n            </Table>\n    )\n}\n\nexport default NodeExplorer\n","import React from 'react';\nimport { ChainTree } from 'tupelo-wasm-sdk';\nimport { Typography, makeStyles, Theme } from '@material-ui/core';\nimport {Link} from 'react-navi'\nimport NodeDisplay from './nodedisplay';\nimport { route } from 'navi'\nimport { getCommunity } from './community';\n\n\nexport const explorerRoute = route(async (req) => {\n    const did = req.params.did\n    const fetchTreeResult = await fetchTree(did)\n    let path = [\"\"]\n    let decodedCbor\n    if (req.params.path) {\n        path = req.params.path.split(\"/\")\n    }\n    if (fetchTreeResult.tree !== undefined) {\n        const resolveResult = await fetchTreeResult.tree.resolve(path)\n        if (resolveResult.value !== undefined) {\n            decodedCbor = resolveResult.value\n        }\n    }\n    return {\n        view: <Explorer did={did} path={path} fetchTreeResult={fetchTreeResult} decodedCbor={decodedCbor} />\n    }\n})\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    pathDisplay: {\n        padding: theme.spacing(0, 0.5),\n    },\n}));\n\ninterface IFetchTreeResult {\n    tree?:ChainTree\n    found:boolean\n    message?:string\n}\n\nexport const fetchTree = async (did: string):Promise<IFetchTreeResult> => {\n    if (did === \"\") {\n        return {\n            found: false,\n        }\n    }\n    const community = await getCommunity()\n\n    try {\n        const tip = await community.getTip(did)\n        const tree = new ChainTree({\n            store: community.blockservice,\n            tip: tip,\n        })\n        return {\n            tree: tree,\n            found: true,\n        }\n    } catch (e) {\n        if (e === \"not found\") {\n            return {\n                found: false,\n            }\n        }\n        throw e\n    }\n}\n\n\nconst PathRenderer = ({ did, path }: { did:string, path: string[] }) => {\n    const classes = useStyles()\n\n    return (\n        <div>\n        Path: \n        {path.map((val: string, i: number) => {\n            return (\n                <Link\n                    key={i}\n                    className={classes.pathDisplay}\n                    href={\"/chaintrees/\" + did + \"?path=\" + path.slice(0,i+1).join(\"/\")}\n                >\n                    {val}/\n            </Link>)\n        })}</div>\n    )\n}\n\nconst Explorer = ({ did, fetchTreeResult, path, decodedCbor }: { did:string, fetchTreeResult: IFetchTreeResult, path:string[], decodedCbor:any }) => {\n\n    let result = fetchTreeResult\n\n    return (\n        <div>\n        {result && (result.found === undefined || !result.found) && (\n            <div>\n                <Typography variant=\"h6\">{did}</Typography>\n                {(did === \"\") ? \"Awaiting your DID\" : \"Not found\"}\n            </div>\n        )}\n        {(result && result.tree !== undefined) && (\n            <div>\n            <Typography variant=\"h6\">{did}</Typography>\n            <p>tip: {result.tree.tip.toString()}</p>\n            <PathRenderer did={did} path={path}/>\n            <NodeDisplay decodedCbor={decodedCbor} path={path} did={did}/>\n            </div>\n        )}\n        </div>\n    )\n}\n\nexport default Explorer","import React, { useState } from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, CircularProgress, Button } from '@material-ui/core';\nimport { ChainTree, mintTokenTransaction } from 'tupelo-wasm-sdk'\nimport { getCommunity } from '../community';\n\n/**\n * Mint token is really simple, just take a tokenName and ammount and create it.\n * The token must be *established* (see {@link EstablishTokenDialog }) before you are allowed to mint.\n */\nexport const MintTokenDialog = ({ open, onClose, tree, tokenName }: { tokenName: string, open: boolean, onClose: () => void, tree: ChainTree }) => {\n    const [amount, setAmount] = useState(0)\n    const [loading, setLoading] = useState(false)\n\n\n    const handleSubmit = async () => {\n        if (tree === undefined) {\n            throw new Error(\"userTree is undefined\")\n        }\n        setLoading(true)\n        const community = await getCommunity()\n        await community.playTransactions(tree, [mintTokenTransaction(tokenName, amount)])\n        _onClose()\n    }\n\n    const _onClose = () => {\n        setAmount(0)\n        setLoading(false)\n        onClose()\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Mint Tokens</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Mint tokens of type {tokenName}\n                </DialogContentText>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"amount\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    fullWidth\n                    onChange={(evt) => { setAmount(parseInt(evt.target.value, 10)) }}\n                    value={amount.toString()}\n                />\n\n            </DialogContent>\n            {loading ? <CircularProgress /> :\n                <DialogActions>\n                    <Button onClick={_onClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        Mint\n                    </Button>\n                </DialogActions>\n            }\n        </Dialog>\n    )\n}\n\nexport default MintTokenDialog","import React, { useState, useEffect } from 'react'\nimport {  Table, TableHead, TableBody, TableRow, TableCell, CircularProgress, Button } from '@material-ui/core';\nimport { ChainTree } from 'tupelo-wasm-sdk'\nimport SendTokenDialog from './sendtokendialog'\nimport MintTokenDialog from './minttokendialog'\n\nconst tokenPath = [\"tree\", \"_tupelo\", \"tokens\"];\n\nexport const NodeRow = ({tree,tokenName}:{tree:ChainTree, tokenName:string})=> {\n    const [balance,setBalance] = useState(0)\n    const [max,setMax] = useState(null)\n    const [loading,setLoading] = useState(true)\n    const [loaded,setLoaded] = useState(false)\n    const [mintDialogOpen, setMintDialogOpen] = useState(false)\n    const [sendDialogOpen, setSendDialogOpen] = useState(false)\n\n    const loadInfo = async ()=> {\n        setLoaded(true)\n\n        const tokenInfoPath = tokenPath.concat(tokenName)\n        const tokenInfoResp = await tree.resolve(tokenInfoPath)\n        if (tokenInfoResp.value.monetaryPolicy) {\n            const monetaryPolicy = await tree.resolve(tokenInfoPath.concat(\"monetaryPolicy\"))\n            setMax(monetaryPolicy.value['maximum'])\n        }\n\n        setBalance(tokenInfoResp.value['balance'])\n        setLoading(false)\n    }\n\n    useEffect(()=> {\n        if (!loaded) {\n            loadInfo()\n        }\n    })\n\n    const handleMintClose = ()=> {\n        setMintDialogOpen(false)\n        setLoaded(false)\n    }\n\n    const handleSendClose = ()=> {\n        setSendDialogOpen(false)\n        setLoaded(false)\n    }\n\n    return (\n        <TableRow>\n            <TableCell>\n                {tokenName}\n            </TableCell>\n            <TableCell>\n                {loading ? <CircularProgress/> : balance}\n            </TableCell>\n            <TableCell>\n                {loading ? <CircularProgress/> : max}\n            </TableCell>\n            <TableCell>\n                <Button onClick={()=>{setMintDialogOpen(true)}}>\n                    Mint\n                </Button>\n                <Button onClick={()=>{setSendDialogOpen(true)}}>\n                    Send\n                </Button>\n                <MintTokenDialog open={mintDialogOpen} onClose={handleMintClose} tree={tree} tokenName={tokenName}/>\n                <SendTokenDialog open={sendDialogOpen} onClose={handleSendClose} tree={tree} tokenName={tokenName}/>\n            </TableCell>\n        </TableRow>\n    )\n}\n\nexport const TokenList = ({ tree }: { tree: ChainTree }) => {\n    const [tokens, setTokens] = useState({});\n    const [loaded, setLoaded] = useState(false);\n\n    const loadTokens = async () => {\n        let tokenResp = await tree.resolve(tokenPath)\n\n        if (tokenResp.value) {\n            console.log(\"tokens resp: \", tokenResp)\n            setLoaded(true)\n            setTokens(tokenResp.value)\n        }\n    }\n\n    useEffect(() => {\n        if (!loaded) {\n            loadTokens()\n        }\n    })\n\n    return (\n        <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Balance</TableCell>\n                    <TableCell>Max</TableCell>\n                    <TableCell>Actions</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {Object.keys(tokens).map((k: string, i: number) => {\n                    return (<NodeRow key={i} tree={tree} tokenName={k}/>)\n                })}\n            </TableBody>\n        </Table>\n    )\n}\n\nexport default TokenList","import React, {useState} from 'react'\nimport {  Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, CircularProgress, Button } from '@material-ui/core';\nimport { ChainTree, establishTokenTransaction } from 'tupelo-wasm-sdk'\nimport { getCommunity } from '../community';\n\n/**\n * Establishing a token allows you to mint them. It is done before a mint because it allows you to set a monetary\n * policy. As of this writing, only a maximum is supported in the monetary policy. A maximum of 0 means unlimited.\n * \n */\nexport const EstablishTokenDialog = ({open, onClose, tree}:{open:boolean, onClose:() => void, tree:ChainTree})=> {\n\n    const [tokenName, setTokenName] = useState(\"\")\n    const [maxAmount, setMaxAmount] = useState(0)\n    const [loading,setLoading] = useState(false)\n\n    const handleSubmit = async ()=> {\n        if (tree === undefined) {\n            throw new Error(\"userTree is undefined\")\n        }\n        setLoading(true)\n        const community = await getCommunity()\n        await community.playTransactions(tree, [establishTokenTransaction(tokenName, maxAmount)])\n        _onClose()\n    }\n\n    const _onClose = ()=> {\n        setTokenName(\"\")\n        setMaxAmount(0)\n        setLoading(false)\n        onClose()\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Establish Token</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Establish a token with a name and a monetary policy.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Token Name\"\n                        fullWidth\n                        onChange={(evt)=> {setTokenName(evt.target.value)}}\n                        value={tokenName}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"maximum\"\n                        label=\"Maximum Amount\"\n                        type=\"number\"\n                        fullWidth\n                        onChange={(evt)=> {setMaxAmount(parseInt(evt.target.value, 10))}}\n                        value={maxAmount}\n                    />\n                </DialogContent>\n                {loading ? <CircularProgress/> : \n                <DialogActions>\n                    <Button onClick={_onClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        Establish\n                    </Button>\n                </DialogActions>\n                }\n            </Dialog>\n    )\n}\n\nexport default EstablishTokenDialog","import React, { useState, useEffect } from 'react'\nimport { mount, route, redirect, map } from 'navi'\nimport { globalStorageStarted } from '../state'\nimport { ChainTree } from 'tupelo-wasm-sdk'\nimport TokenDisplay from './tokendisplay'\nimport { Button, Grid } from '@material-ui/core';\nimport ReceiveTokenDialog from './receivetokendialog'\nimport EstablishTokenDialog from './establishtokendialog'\n/**\n * Define the navi routes \n */\nexport const walletRoute = mount({\n    \"/\": map(async (req, userTreeObj) => {\n        await globalStorageStarted\n        const userTree = userTreeObj as ChainTree\n        if (userTree.id === undefined) {\n            return redirect(\"/login\")\n        }\n        return route({\n            view: <WalletPage tree={userTree} />\n        })\n    }),\n});\n\n\n/**\n * Demos all the coin transactions:\n * EstablishToken,MintToken,SendToken,ReceiveToken\n * A full flow of creating and then sending a token is this:\n * \n * * Establish the token with a monetary policy\n * * Mint some tokens (less than the maximum defined in monetaryPolicy)\n * * Send token (that you have a balance of)\n * * copy the payload generated from sending the token and send (out-of-band) to receiver\n * \n * Then the receiver\n * * Receive token transaction using the sent payload\n * \n * Note the payload does not need to be kept secure, it is tied directly to the receiving chaintree.\n */\nconst WalletPage = ({ tree }: { tree: ChainTree }) => {\n    const [dialogOpen, setDialogOpen] = useState(false)\n    const [receiveDialogOpen,setReceiveDialogOpen] = useState(false)\n    const [did,setDid] = useState(\"\")\n\n    const handleClose = () => {\n        setDialogOpen(false)\n        setReceiveDialogOpen(false)\n    }\n\n    useEffect(()=> {\n        tree.id().then((id)=> {\n            if (id != null) {\n                setDid(id)\n            }\n        })\n    })\n\n    return (\n        <div>\n            <h1>Wallet</h1>\n            <p>{did}</p>\n            <Grid container spacing={2}>\n                <Grid item>\n                    <Button variant=\"outlined\" onClick={() => { setDialogOpen(true) }}>Establish Token</Button>\n                </Grid>\n                <Grid item>\n                    <Button variant=\"outlined\" onClick={()=>{setReceiveDialogOpen(true)}}>Receive Token</Button>\n                </Grid>\n            </Grid>\n            <TokenDisplay tree={tree}/>\n            <EstablishTokenDialog open={dialogOpen} onClose={handleClose} tree={tree}/>\n            <ReceiveTokenDialog open={receiveDialogOpen} onClose={handleClose} tree={tree}/>\n        </div>\n    )\n}\n","import React, { useState, Suspense } from 'react';\n\nimport { Paper, Container, Grid, Theme, AppBar, Toolbar, Typography, TextField, InputAdornment } from '@material-ui/core';\nimport { explorerRoute } from './explorer';\nimport { makeStyles } from '@material-ui/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { mount, route } from 'navi'\nimport { Router, View, useNavigation, NotFoundBoundary } from 'react-navi'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useGlobalState } from './state';\nimport { loginRoute } from './wallet/login';\nimport { walletRoute } from './wallet/wallet';\nimport { createHashHistory } from 'history';\n\nimport 'tupelo-wasm-sdk' // in order to bring in the Go global\ndeclare const Go: any;\n\nconst subDirectory = window.location.pathname\n\nif (subDirectory !== '/') {\n    console.log(\"setting wasmpath to: \",  subDirectory + \"/tupelo.wasm\")\n    Go.wasmPath = subDirectory + \"/tupelo.wasm\"\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    title: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    search: {\n        marginLeft: theme.spacing(3),\n    },\n    searchIcon: {\n        color: \"white\",\n    }\n}));\n\nconst routes =\n    mount({\n        '/': route({\n            view: <div>Awaiting your DID</div>\n        }),\n        '/chaintrees/:did': explorerRoute,\n        '/login': loginRoute,\n        \"/wallet\": walletRoute,\n    })\n\nexport const NavBar = () => {\n    const classes = useStyles();\n    let [search, setSearch] = useState(\"\")\n    let navigation = useNavigation()\n\n    const handleSubmit = (evt: React.FormEvent) => {\n        evt.preventDefault()\n        if (!!search && search !== \"\") {\n            navigation.navigate(\"/chaintrees/\" + search)\n        }\n    }\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography className={classes.title} variant=\"h6\" noWrap>\n                    ChainTree Explorer\n            </Typography>\n                <form onSubmit={handleSubmit}>\n                    <TextField\n                        className={classes.search}\n                        id=\"did\"\n                        label=\"search...\"\n                        type=\"search\"\n                        variant=\"filled\"\n                        InputProps={{\n                            startAdornment: <InputAdornment position=\"start\"><SearchIcon className={classes.searchIcon} /></InputAdornment>,\n                        }}\n                        value={search}\n                        onChange={(evt) => {\n                            setSearch(evt.target.value)\n                        }} />\n                </form>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport const Layout = () => {\n    const classes = useStyles();\n    const [userTree] = useGlobalState(\"userTree\")\n\n    return (\n        <Container maxWidth=\"lg\">\n\n            <Router \n                routes={routes} \n                context={userTree} \n                history={createHashHistory()}>\n                <NavBar />\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    spacing={2}\n                >\n                    <Grid item xs={12} >\n                        <Paper className={classes.root}>\n                            <NotFoundBoundary render={renderNotFound}>\n                                <Suspense fallback={<CircularProgress />}>\n                                    <View />\n                                </Suspense>\n                            </NotFoundBoundary>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Router>\n\n        </Container>\n    )\n}\n\nconst renderNotFound = (err: Error) => {\n    return (\n        <h1>NotFound</h1>\n    )\n}","import React from 'react';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from './theme';\nimport { Layout } from './layout'\nimport { GlobalStateProvider } from './state'\n\nconst App: React.FC = () => {\n  return (\n    <GlobalStateProvider>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Layout />\n      </ThemeProvider>\n    </GlobalStateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Community} from 'tupelo-wasm-sdk'\n\nexport const getCommunity = async ()=> {\n    return Community.getDefault()\n}","import React, { useState } from 'react';\nimport { route,mount } from 'navi';\nimport { TextField, Button, Grid, Typography, CircularProgress } from '@material-ui/core';\nimport { EcdsaKey, Tupelo, ChainTree, setOwnershipTransaction, setDataTransaction } from 'tupelo-wasm-sdk';\nimport { useNavigation } from 'react-navi';\nimport { dispatch } from '../state';\nimport { getCommunity } from '../community';\n\nexport const usernameKey = \"/_crazywallet/username\"\nconst namespace =  Buffer.from(\"_crazywallet-dev\")\n\n/**\n * Generates a public/private keypair from an *insecure* passphrase.\n * This method is used to generate a ChainTree with a known name (given a namespace)\n * The very first thing you do with the ChainTree should be to ChangeOwner\n * @param userName - the username\n */\nconst publicUserKey = async (userName:string)=> {\n    return EcdsaKey.passPhraseKey(Buffer.from(userName),namespace)\n}\n\n/**\n * Fetch the ChainTree based on the username see {@link publicUserKey} for more details\n * on how we determine the ChainTree from the username.\n * \n * @param userName - the username\n */\nconst userTree = async (userName:string) => {\n    const key = await publicUserKey(userName)\n    // Convert the key to a tupelo DID (ChainTree id)\n    const did = await Tupelo.ecdsaPubkeyToDid(key.publicKey)\n\n    const community = await getCommunity()\n    let tip\n    try {\n        tip = await community.getTip(did)\n    } catch(e) {\n        if (e === \"not found\") {\n            return null\n        }\n    }\n    if (tip === undefined) {\n        return null\n    }\n    const tree = new ChainTree({\n        store: community.blockservice,\n        tip: tip,\n    })\n    return tree\n}\n\n/**\n * Define the navi routes \n */\nexport const loginRoute = mount({\n    \"/\": route(async (req) => {\n            return {\n                view: <RootLoginPage />\n            }\n    }),\n    \"/available/:username\": route(async (req) => {\n        const username = req.params.username\n        const tree = await userTree(username)\n        if (tree) {\n            return {\n                view: <UsernameUnavailable userName={username} tree={tree} />\n            }\n        } else {\n            return {\n                view: <UsernameAvailable userName={username} />\n            }\n        }\n    }),\n});\n\n\n/**\n * \n * When the username is unavailable\n */\nconst UsernameUnavailable = ({userName, tree}:{userName:string, tree:ChainTree}) => {\n    const navigation = useNavigation()\n\n    const [loading,setLoading] = useState(false)\n    const [password,setPassword] = useState(\"\")\n    const [badPassword,setBadPassword] = useState(false)\n\n    const handleSubmit = async (evt:React.FormEvent)=> {\n        evt.preventDefault()\n\n        setLoading(true)\n        setBadPassword(false)\n        let secureKey = await EcdsaKey.passPhraseKey(Buffer.from(password), Buffer.from(userName))\n        let secureAddr = await Tupelo.ecdsaPubkeyToAddress(secureKey.publicKey)\n        let resolveResp = await tree.resolve([\"tree\", \"_tupelo\", \"authentications\"])\n        setLoading(false)\n        let auths:string[] = resolveResp.value\n        if (auths.includes(secureAddr)) {\n            dispatch({\n                type:\"setKey\",\n                userKey: secureKey,\n            })\n            dispatch({\n                type:\"setTree\",\n                userTree: tree,\n            })\n            navigation.navigate(\"/wallet\")\n        } else {\n            setBadPassword(true)\n        }\n        setLoading(false)\n    }\n\n    return (\n        <div>\n            Username {userName} is NOT available.\n            <p>Your Username? You can login.</p>\n            <form onSubmit={handleSubmit}>\n            {loading ? <CircularProgress/> : null}\n             <Grid container spacing={2}>\n                    <Grid item>\n                        <TextField error={badPassword} label=\"password\" id=\"password\" type=\"password\" value={password} onChange={(evt) => {setPassword(evt.target.value)}}/>\n                    </Grid>\n                    <Grid item>\n                        <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    )\n}\n\n/**\n * When the user name is available, offer to register the user with a password.\n * Under the hood, we'll be creating a private key from the password using the\n * warp wallet technique (Brain wallet).\n */\nconst UsernameAvailable = ({userName}:{userName:string}) => {\n    const navigation = useNavigation()\n    const [password,setPassword] = useState(\"\")\n    const [loading,setLoading] = useState(false)\n\n    /**\n     * * create the private key from the password\n     * * change ownership of the known ChainTree to the new key\n     * * change the global state to reflect the user is logged in\n     */\n    const registerUser = async ()=> {\n        setLoading(true)\n        const insecureKey = await publicUserKey(userName)\n\n        const secureKey = await EcdsaKey.passPhraseKey(Buffer.from(password), Buffer.from(userName))\n        const secureKeyAddress = await Tupelo.ecdsaPubkeyToAddress(secureKey.publicKey)\n        \n        const community = await getCommunity()\n        const tree = await ChainTree.newEmptyTree(community.blockservice, insecureKey)\n\n        await community.playTransactions(tree, [\n                // Set the ownership of the chaintree to our secure key (thus owning the username)\n                setOwnershipTransaction([secureKeyAddress]),\n                // Cache the username inside of the chaintree for easier access later\n                setDataTransaction(usernameKey, userName),\n        ])\n        tree.key = secureKey\n        dispatch({\n            type:\"setKey\",\n            userKey: secureKey,\n        })\n        dispatch({\n            type:\"setTree\",\n            userTree: tree,\n        })\n        setLoading(false)\n        navigation.navigate(\"/wallet\")\n    }\n\n    const handleSubmit = (evt:React.FormEvent) => {\n        evt.preventDefault()\n        registerUser()\n    }\n\n    return (\n        <div>\n            Username {userName} is available.\n            <p>Reserve username?</p>\n            <form onSubmit={handleSubmit}>\n            {loading ? <CircularProgress/> : null}\n             <Grid container spacing={2}>\n                    <Grid item>\n                        <TextField label=\"password\" id=\"password\" type=\"password\" value={password} onChange={(evt) => {setPassword(evt.target.value)}}/>\n                    </Grid>\n                    <Grid item>\n                        <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    )\n}\n\n\n/**\n * The root login page which just allows for choosing a username\n */\nexport const RootLoginPage = () => {\n\n    const navigation = useNavigation()\n    const [username,setUsername] = useState(\"\")\n\n    const handleSubmit = (evt:React.FormEvent) => {\n        evt.preventDefault()\n        navigation.navigate(\"/login/available/\" + username)\n    }\n\n    return (\n        <div>\n            <Typography>Login or Register</Typography>\n            <form onSubmit={handleSubmit}>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <TextField label=\"user name\" id=\"userName\" value={username} onChange={(evt) => {setUsername(evt.target.value)}}/>\n                    </Grid>\n                    <Grid item>\n                        <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, CircularProgress, Button } from '@material-ui/core';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport { ChainTree, sendTokenTransaction } from 'tupelo-wasm-sdk'\nimport { getCommunity } from '../community';\n\nconst uuidv4: () => string = require('uuid/v4');\n\n/**\n * \n * You can send any token you have a balance of. This dialog will show the user the base64 encoded version of the payload they need to send\n * to the receiver. If that payload is lost, it's difficult to recover.\n * The token transaction flow is this:\n * send token (transaction) -> copy payload -> send payload -> (receiver) get payload -> receive token (transaction)\n */\nexport const SendTokenDialog = ({ open, onClose, tree, tokenName }: { tokenName: string, open: boolean, onClose: () => void, tree: ChainTree }) => {\n    const [amount, setAmount] = useState(0)\n    const [destination, setDestination] = useState(\"\")\n    const [loading, setLoading] = useState(false)\n    const [code, setCode] = useState()\n\n    const handleSubmit = async () => {\n        if (tree === undefined) {\n            throw new Error(\"userTree is undefined\")\n        }\n        setLoading(true)\n        //sendId must be unique to the receiving chaintree. Here we just use a globally unique uuid.\n        const uuid = uuidv4()\n        const community = await getCommunity()\n        // const canonicalName = await tokenCanonicalName(tree, tokenName)\n        console.log('tokenname: ', tokenName)\n    \n        // sendTokenAndGetPayload is a helper function to both play the send token transaction and then also create the payload\n        // from the transaction. it is then shown to the user.\n        const payload = await community.sendTokenAndGetPayload(tree, sendTokenTransaction(uuid, tokenName, amount, destination))\n        setCode(Buffer.from(payload.serializeBinary()).toString('base64'))\n    }\n\n    const _onClose = () => {\n        setAmount(0)\n        setDestination(\"\")\n        setLoading(false)\n        onClose()\n    }\n\n    return (\n        !code ? <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Send Tokens</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Send tokens of type {tokenName}\n                </DialogContentText>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"name\"\n                    label=\"Destination\"\n                    fullWidth\n                    onChange={(evt) => { setDestination(evt.target.value) }}\n                    value={destination}\n                />\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"amount\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    fullWidth\n                    onChange={(evt) => { setAmount(parseInt(evt.target.value, 10)) }}\n                    value={amount.toString()}\n                />\n\n            </DialogContent>\n            {loading ? <CircularProgress /> :\n                <DialogActions>\n                    <Button onClick={_onClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        Send\n                    </Button>\n                </DialogActions>\n            }\n        </Dialog> : // if we have a code, display it to the user\n        <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Send Tokens</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Give the following snippet to your send coin receiver:\n                </DialogContentText>\n                <TextareaAutosize>\n                    {code}\n                </TextareaAutosize>\n            </DialogContent>\n            <DialogActions>\n                    <Button onClick={_onClose} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>\n        </Dialog>\n        \n    )\n}\n\nexport default SendTokenDialog","import React, {useState} from 'react'\nimport {  Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, CircularProgress, Button } from '@material-ui/core';\nimport { ChainTree, receiveTokenTransactionFromPayload } from 'tupelo-wasm-sdk'\nimport { TokenPayload } from 'tupelo-messages/transactions/transactions_pb';\nimport { getCommunity } from '../community';\n\n/**\n * Receive token is used on the *receiving* side of a token transaction. The sender does a send transaction and then \n * (out of band) sends the payload to the receiver. The receiver can then do a receive coin transaction.\n */\nexport const ReceiveTokenDialog = ({open, onClose, tree}:{open:boolean, onClose:() => void, tree:ChainTree})=> {\n    const [code, setCode] = useState(\"\")\n    const [loading,setLoading] = useState(false)\n\n    const handleSubmit = async ()=> {\n        if (tree === undefined) {\n            throw new Error(\"userTree is undefined\")\n        }\n        let tokenPayload = TokenPayload.deserializeBinary(Buffer.from(code, 'base64'))\n        // The receiveTokenTransactionFromPayload function is a helper to create a transaction\n        // from a TokenPayload\n        let tx = receiveTokenTransactionFromPayload(tokenPayload)\n\n        setLoading(true)\n        const community = await getCommunity()\n        await community.playTransactions(tree, [tx])\n        _onClose()\n    }\n\n    const _onClose = ()=> {\n        setCode(\"\")\n        setLoading(false)\n        onClose()\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Receive Tokens</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                       Receive Tokens\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Code\"\n                        fullWidth\n                        onChange={(evt)=> {setCode(evt.target.value)}}\n                        value={code}\n                    />\n                </DialogContent>\n                {loading ? <CircularProgress/> : \n                <DialogActions>\n                    <Button onClick={_onClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        Send\n                    </Button>\n                </DialogActions>\n                }\n            </Dialog>\n    )\n}\n\nexport default ReceiveTokenDialog","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 588;","import { createStore } from 'react-hooks-global-state';\nimport {EcdsaKey, ChainTree} from 'tupelo-wasm-sdk';\nimport { getCommunity } from './community';\n\nlet resolve:Function\nexport const globalStorageStarted = new Promise((res)=> {resolve = res})\n\ninterface IGlobalState {\n    userKey?:EcdsaKey\n    userTree?:ChainTree\n}\n\ninterface IAction {\n    type:\"setKey\"|\"setTree\"\n    userKey?:EcdsaKey\n    userTree?:ChainTree\n}\n\nconst reducer = (state:IGlobalState, action:IAction) => {\n    switch (action.type) {\n      case 'setKey': return {...state, userKey: action.userKey}\n      case 'setTree': return { ...state, userTree: action.userTree };\n      default: return state;\n    }\n  };\n\nconst initialState:IGlobalState = {\n    userTree:undefined,\n    userKey:undefined,\n};\nconst persistentReducer = (state:IGlobalState, action:IAction) => {\n    let mutated = reducer(state,action)\n\n    if (mutated.userKey !== undefined && mutated.userKey.privateKey !== undefined) {\n        sessionStorage.setItem('userKey', Buffer.from(mutated.userKey.privateKey).toString('hex'))\n    }\n    if (mutated.userTree !== undefined) {\n        mutated.userTree.id().then((id)=> {\n            if (id == null) {\n                throw new Error(\"unknown id\")\n            }\n            sessionStorage.setItem('userTreeDid', id)\n        }, (err)=> {\n            throw err\n        })\n    }\n\treturn mutated\n}\n\nexport const { GlobalStateProvider, dispatch, useGlobalState } = createStore(persistentReducer, initialState)\n\nasync function setStoredState() {\n    let keyString = sessionStorage.getItem('userKey')\n    if (!keyString || keyString === \"\") {\n        resolve()\n        return\n    }\n    let key = await EcdsaKey.fromBytes(Buffer.from(keyString, 'hex'))\n\n    let userTreeDid = sessionStorage.getItem('userTreeDid')\n    if (userTreeDid == null) {\n        resolve()\n        throw new Error(\"had a userKey but no user Tree\")\n    }\n    let community = await getCommunity()\n    let tip = await community.getTip(userTreeDid)\n\n    let tree = new ChainTree({\n        tip: tip,\n        store: community.blockservice,\n        key:key,\n    })\n    dispatch({\n        type: \"setKey\",\n        userKey: key,\n    })\n    dispatch({\n        type:\"setTree\",\n        userTree: tree,\n    })\n    resolve()\n}\nsetStoredState()"],"sourceRoot":""}